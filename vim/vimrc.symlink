" 01101110 01011010 01100001 01100011
"
"            /$$$$$$$$
"           |_____ $$
" /$$$$$$$      /$$/   /$$$$$$   /$$$$$$$
" | $$__  $$    /$$/   |____  $$ /$$_____/
" | $$  \ $$   /$$/     /$$$$$$$| $$
" | $$  | $$  /$$/     /$$__  $$| $$
" | $$  | $$ /$$$$$$$$|  $$$$$$$|  $$$$$$$
" |__/  |__/|________/ \_______/ \_______/
"
" By: Nick Zaccardi
" Project: Dotfiles
" License: GNU GPLv3 (https://www.gnu.org/copyleft/gpl.html)

"------------------------------------------------------------------------------
" VUNDLE SETTINGS
"------------------------------------------------------------------------------
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" Must have plugins
Plugin 'gmarik/vundle'
Plugin 'mhinz/vim-signify'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-unimpaired'
Plugin 'flazz/vim-colorschemes'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'closetag.vim'
Plugin 'janko-m/vim-test'
Plugin 'rizzatti/dash.vim'
Plugin 'junegunn/vim-easy-align'

" Reference Library Plugins
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'

" Language Plugins
Plugin 'chase/vim-ansible-yaml'
Plugin 'othree/html5.vim'
Plugin 'hallison/vim-markdown'
Plugin 'wting/rust.vim'
Plugin 'nvie/vim-flake8'
Plugin 'cespare/vim-toml'
Plugin 'elzr/vim-json'

" Plugins that are nice in order of use
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-vinegar'
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'mattn/emmet-vim'
Plugin 'godlygeek/tabular'
Plugin 'Yggdroot/indentLine'
Plugin 'majutsushi/tagbar'
Plugin 'mtth/scratch.vim'
Plugin 'benmills/vimux'

filetype on
Plugin 'scrooloose/nerdcommenter'

if iCanHazVundle == 0
    echo "Installing Vundle packages"
    echo ""
    :PluginInstall
endif

"------------------------------------------------------------------------------
" GENERAL SETTINGS
"------------------------------------------------------------------------------
let mapleader = ";"
syntax enable               " turn on syntax highlightingp
set autoread                " Auto-reload changed files
set backspace=2             " Fix backspace to not be stupid
set colorcolumn=100         " Highlight column 100
set cursorline              " Highlight the line of the cursor
set confirm                 " Confirm before switching from an unsaved buffer
set fileformat=unix         " We are a unix only shop
set hidden                  " Allow switching buffers without saving.see confirm
set laststatus=2            " Always show two status  lines
set listchars=tab:›\ ,eol:¬,trail:⋅ " remap hidden characters
set nonumber                " Don't show line numbers because they take up to much space
set t_Co=256                " 256 colors, go iTerm 2 baby!
set scrolloff=999           " Always keep the cursor in the middle  of the page
set showmatch               " Highlight the opposing bracket
set noshowmode              " Show the mode of the current buffer (visual, insert)
set spell spelllang=en      " Set spelling to be English
set splitbelow              " Splits should open below
set splitright              " Splits should open right
set title                   " Show the title in MacVim
set visualbell              " Who doesn't like a visual bell?!?
set nobackup                " This just causes problems
set noswapfile              " Swapfiles are more of a pain for me then they are helpful
set foldmethod=indent       " Fold based on the indent level
set ignorecase              " Don't worry about case when searching
set smartcase               " Worry about case when I worry about case
set incsearch               " Show me results as I type

if !has('nvim')
  set cryptmethod=blowfish  " Set crypto method
endif

"------------------------------------------------------------------------------
" Tab Settings
"------------------------------------------------------------------------------
set expandtab               " Expand tabs to spaces
set autoindent
set tabstop=4               " Number of spaces a tab counts for
set softtabstop=4           " Soft-tab width in spaces
set shiftwidth=4            " Number of spaces for each >>
set autoindent              " Turn on auto indentation

"------------------------------------------------------------------------------
" Syntax Highlighting and Color
"------------------------------------------------------------------------------
set background=dark
let g:solarized_termcolors=256
colorscheme solarized
let g:airline_powerline_fonts=1
set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 10

"------------------------------------------------------------------------------
" File Type Specific
"------------------------------------------------------------------------------
filetype plugin on
filetype plugin indent on
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby " Vagrant is ruby :(
autocmd BufWritePre * :%s/\s\+$//e " Automatically strip whitespace on save
au BufNewFile,BufRead *.j2 set filetype=htmldjango
au BufNewFile,BufRead *.yaml\|*.yml set filetype=ansible

autocmd FileType rst set textwidth=80  " wrap at 80
autocmd FileType rst set tabstop=2     " Indent by two
autocmd FileType rst set softtabstop=2 " Indent by two
autocmd FileType rst set shiftwidth=2  " Indent by two
autocmd FileType python set textwidth=100  " wrap at 100 for python files
autocmd FileType markdown set textwidth=80  " wrap at 80

"------------------------------------------------------------------------------
" Editor Settings
"------------------------------------------------------------------------------
autocmd VimResized * wincmd = " Make vim equalize when resized

"------------------------------------------------------------------------------
" Plugin  Settings
"------------------------------------------------------------------------------

let NERDTreeIgnore = ['\.pyc$', '__pycache__', '\.egg-info']
let NERDTreeHijackNetrw=1
let g:riv_fold_auto_update = 0       " Turn off auto folding on save for rst files
let g:miniBufExplBRSplit = 0         " put MBE on top
let g:miniBufExplBuffersNeeded = 1
let g:ctrlp_working_path_mode = 'ra' " Set the working path to a .git folder
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|sass-cache|node_modules|bower_components|tox)$'
let g:ctrlp_show_hidden = 1
let g:UltiSnipsExpandTrigger="<tab>"
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 1
let test#javascript#runner = 'mocha'

let test#python#pytest#options = {
                                    \ 'nearest': '-x -s -v --pdb',
                                    \ 'file': '-x',
                                    \ 'suite': '--cov .coveragerc --durations=20',
                                \}
let g:ultisnips_python_style             = 'sphinx'
let g:UltiSnipsSnippetDirectories        = ["UltiSnips", $HOME."/.vim-extras/snippets"]
let g:vim_json_syntax_conceal            = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme                      = 'bubblegum'


"------------------------------------------------------------------------------
" Tab completion setup
"------------------------------------------------------------------------------
set wildmode=list:longest     " Wildcard matches show a list, matching the longest first
set wildignore+=.git,.hg,.svn " Ignore version control repos
set wildignore+=*.6           " Ignore Go compiled files
set wildignore+=*.pyc         " Ignore Python compiled files
set wildignore+=*.rbc         " Ignore Rubinius compiled files
set wildignore+=*.swp         " Ignore vim backups

"------------------------------------------------------------------------------
" General Remappings
"------------------------------------------------------------------------------
" Helpful escape remaps
inoremap jj <ESC>j
inoremap hh <ESC>h
inoremap kk <ESC>k
inoremap lll <ESC>l

" Navigating splits is much easier
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" using visual up/down instead of linewise very helpful for wrapped text
map j gj
map k gk

" Ctrl-a I use for my tmux commands so remap incrementing numbers
nnoremap ≈ <C-x>

"------------------------------------------------------------------------------
" Leader mappings
"------------------------------------------------------------------------------
nnoremap <leader>k :NERDTreeToggle<CR> " Toggle NERDTree
nnoremap <leader>e :bp<CR> :bd # <CR>  " close current buffer without closing split
nnoremap <leader>b <esc>:b#<CR>        " Open previous buffer
nnoremap <leader>} <esc>gq}            " Reformat paragraph
nnoremap <leader>W <C-w>=              " Make splits even
inoremap <leader>s <ESC>:w<CR>         " Save and drop out of insert mode
inoremap <leader>S <C-O>:w<CR>         " Save and stay in insert mode
nnoremap <leader>s :w<CR>              " Save from normal mode
map <leader>y "*y
map <leader>p "*p

"------------------------------------------------------------------------------
" Plugin mappings
"------------------------------------------------------------------------------
nnoremap <leader>t :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>l :CtrlPLine<cr>
nnoremap <leader>h :TagbarToggle<CR>   " Toggle Tabar

nmap <silent> <leader>f :TestNearest<CR>
nmap <silent> <leader>D :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>R :TestLast<CR>
"nmap <silent> <leader>g :TestVisit<CR>
nmap <silent> <leader>d <Plug>DashSearch
xmap gq <Plug>(LiveEasyAlign)
nmap gq <Plug>(LiveEasyAlign)

"------------------------------------------------------------------------------
" Custom Functions
"------------------------------------------------------------------------------

" Pretty up a JSON File
com! FormatJSON %!python -m json.tool
com! FixLineEndings :%s///g
